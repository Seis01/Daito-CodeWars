# Hamming Numbers.
# Topic: NUMBER THEORY, ALGORITHMS.

'''
# Task:
-------
A Hamming number is a positive integer of the form 2i3j5k, for some non-negative integers i, j, and k.

Write a function that computes the nth smallest Hamming number.

Specifically:

The first smallest Hamming number is 1 = 203050
The second smallest Hamming number is 2 = 213050
The third smallest Hamming number is 3 = 203150
The fourth smallest Hamming number is 4 = 223050
The fifth smallest Hamming number is 5 = 203051
The 20 smallest Hamming numbers are given in the Example test fixture.

Your code should be able to compute the first 5 000 ( LC: 400, Clojure: 2 000, Haskell: 12 691, NASM, C, D, C++, Go and Rust: 13 282 ) Hamming numbers without timing out.


# Sample Tests:
----------------
import codewars_test as test
from solution import hamming

@test.describe("Fixed Tests")
def fixed_tests():
    @test.it('Basic Test Cases')
    def basic_test_cases():
        test.assert_equals(hamming(1), 1, "hamming(1) should be 1")
        test.assert_equals(hamming(2), 2, "hamming(2) should be 2")
        test.assert_equals(hamming(3), 3, "hamming(3) should be 3")
        test.assert_equals(hamming(4), 4, "hamming(4) should be 4")
        test.assert_equals(hamming(5), 5, "hamming(5) should be 5")
        test.assert_equals(hamming(6), 6, "hamming(6) should be 6")
        test.assert_equals(hamming(7), 8, "hamming(7) should be 8")
        test.assert_equals(hamming(8), 9, "hamming(8) should be 9")
        test.assert_equals(hamming(9), 10, "hamming(9) should be 10")
        test.assert_equals(hamming(10), 12, "hamming(10) should be 12")
        test.assert_equals(hamming(11), 15, "hamming(11) should be 15")
        test.assert_equals(hamming(12), 16, "hamming(12) should be 16")
        test.assert_equals(hamming(13), 18, "hamming(13) should be 18")
        test.assert_equals(hamming(14), 20, "hamming(14) should be 20")
        test.assert_equals(hamming(15), 24, "hamming(15) should be 24")
        test.assert_equals(hamming(16), 25, "hamming(16) should be 25")
        test.assert_equals(hamming(17), 27, "hamming(17) should be 27")
        test.assert_equals(hamming(18), 30, "hamming(18) should be 30")
        test.assert_equals(hamming(19), 32, "hamming(19) should be 32")
        

# Code:
--------
def hamming(n):
    pass

'''
# Solution:
def hamming(n):
    # The sequence of Hamming numbers
    hamming_numbers = [1]

    # Indices for 2, 3, and 5
    i2 = i3 = i5 = 0

    # Generate the first n Hamming numbers
    while len(hamming_numbers) < n:
        # Next possible Hamming numbers by multiplying by 2, 3, and 5
        next2 = hamming_numbers[i2] * 2
        next3 = hamming_numbers[i3] * 3
        next5 = hamming_numbers[i5] * 5

        # The next Hamming number is the smallest of these
        next_hamming = min(next2, next3, next5)

        # Add the next Hamming number to the sequence if it's not already there
        if next_hamming not in hamming_numbers:
            hamming_numbers.append(next_hamming)

        # Increment the respective index if the next Hamming number was generated by it
        if next_hamming == next2:
            i2 += 1
        if next_hamming == next3:
            i3 += 1
        if next_hamming == next5:
            i5 += 1

    return hamming_numbers[n - 1]

# Test cases
test_results = [hamming(i) for i in range(1, 20)]
test_results

# Description:
'''
The hamming function correctly computes the nth smallest Hamming number. Hamming numbers are positive integers that can be expressed in the form 
2^i #^j 5^k   for non-negative integers i,j, and k. 

'''
